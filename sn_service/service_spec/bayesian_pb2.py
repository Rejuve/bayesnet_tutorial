# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sn_service/service_spec/bayesian.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='sn_service/service_spec/bayesian.proto',
  package='sn_bayes',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=b'\n&sn_service/service_spec/bayesian.proto\x12\x08sn_bayes\"\xab\n\n\x0f\x42\x61yesianNetwork\x12M\n\x15\x64iscreteDistributions\x18\x01 \x03(\x0b\x32..sn_bayes.BayesianNetwork.DiscreteDistribution\x12[\n\x1c\x63onditionalProbabilityTables\x18\x02 \x03(\x0b\x32\x35.sn_bayes.BayesianNetwork.ConditionalProbabilityTable\x12\x34\n\tanomalies\x18\x03 \x03(\x0b\x32!.sn_bayes.BayesianNetwork.Anomaly\x1a\x9f\x01\n\x14\x44iscreteDistribution\x12\x0c\n\x04name\x18\x01 \x01(\t\x12J\n\tvariables\x18\x02 \x03(\x0b\x32\x37.sn_bayes.BayesianNetwork.DiscreteDistribution.Variable\x1a-\n\x08Variable\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0bprobability\x18\x02 \x01(\x02\x1a\xe2\x04\n\x1b\x43onditionalProbabilityTable\x12\x0c\n\x04name\x18\x01 \x01(\t\x12]\n\x0frandomVariables\x18\x02 \x03(\x0b\x32\x44.sn_bayes.BayesianNetwork.ConditionalProbabilityTable.RandomVariable\x12s\n\x1a\x63onditionalProbabilityRows\x18\x03 \x03(\x0b\x32O.sn_bayes.BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow\x12M\n\x07outvars\x18\x04 \x03(\x0b\x32<.sn_bayes.BayesianNetwork.ConditionalProbabilityTable.OutVar\x1a\x1e\n\x0eRandomVariable\x12\x0c\n\x04name\x18\x01 \x01(\t\x1a\xd9\x01\n\x19\x43onditionalProbabilityRow\x12\x81\x01\n\x14randomVariableValues\x18\x01 \x03(\x0b\x32\x63.sn_bayes.BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow.RandomVariableValue\x12\x13\n\x0bprobability\x18\x02 \x01(\x02\x1a#\n\x13RandomVariableValue\x12\x0c\n\x04name\x18\x01 \x01(\t\x1a\x16\n\x06OutVar\x12\x0c\n\x04name\x18\x01 \x01(\t\x1a\xae\x02\n\x07\x41nomaly\x12=\n\tdetectors\x18\x01 \x03(\x0b\x32*.sn_bayes.BayesianNetwork.Anomaly.Detector\x12\x0e\n\x06is_all\x18\x02 \x01(\x08\x12\x0f\n\x07varName\x18\x03 \x01(\t\x12\x0f\n\x07n_steps\x18\x04 \x01(\x05\x12\x11\n\tstep_size\x18\x05 \x01(\x05\x12\t\n\x01\x63\x18\x06 \x01(\x02\x12\t\n\x01n\x18\x07 \x01(\x05\x12\x0e\n\x06window\x18\x08 \x01(\x05\x12\x0c\n\x04side\x18\t \x01(\t\x12\x0c\n\x04high\x18\n \x01(\x02\x12\x0b\n\x03low\x18\x0b \x01(\x02\x12\x14\n\x0chigh_percent\x18\x0c \x01(\x02\x12\x13\n\x0blow_percent\x18\r \x01(\x02\x12\x0b\n\x03std\x18\x0e \x01(\x02\x1a\x18\n\x08\x44\x65tector\x12\x0c\n\x04name\x18\x01 \x01(\t\"#\n\x02Id\x12\n\n\x02id\x18\x01 \x01(\t\x12\x11\n\terror_msg\x18\x02 \x01(\t\"(\n\x07Timeval\x12\x0b\n\x03val\x18\x01 \x01(\x02\x12\x10\n\x08interval\x18\x02 \x01(\x02\"\x91\x05\n\x06\x41nswer\x12.\n\nvarAnswers\x18\x01 \x03(\x0b\x32\x1a.sn_bayes.Answer.VarAnswer\x12\x30\n\x0c\x65xplanations\x18\x02 \x03(\x0b\x32\x1a.sn_bayes.Answer.VarAnswer\x12\x38\n\x10signal_anomalies\x18\x03 \x03(\x0b\x32\x1e.sn_bayes.Answer.AnomalyAnswer\x12-\n\tanomalies\x18\x04 \x03(\x0b\x32\x1a.sn_bayes.Answer.FitAnswer\x12\x11\n\terror_msg\x18\x05 \x01(\t\x1a\x88\x01\n\tVarAnswer\x12\x0f\n\x07var_num\x18\x01 \x01(\x05\x12\x36\n\tvarStates\x18\x02 \x03(\x0b\x32#.sn_bayes.Answer.VarAnswer.VarState\x1a\x32\n\x08VarState\x12\x11\n\tstate_num\x18\x01 \x01(\x05\x12\x13\n\x0bprobability\x18\x02 \x01(\x02\x1a\x9e\x01\n\rAnomalyAnswer\x12\x0f\n\x07var_num\x18\x01 \x01(\x05\x12\"\n\x07signals\x18\x02 \x03(\x0b\x32\x11.sn_bayes.Timeval\x12\x39\n\tanomalies\x18\x03 \x03(\x0b\x32&.sn_bayes.Answer.AnomalyAnswer.Anomaly\x1a\x1d\n\x07\x41nomaly\x12\x12\n\nis_anomaly\x18\x01 \x01(\x08\x1a}\n\tFitAnswer\x12\x0f\n\x07var_num\x18\x01 \x01(\x05\x12\x36\n\tfitStates\x18\x02 \x03(\x0b\x32#.sn_bayes.Answer.FitAnswer.FitState\x1a\'\n\x08\x46itState\x12\x0e\n\x06\x66itted\x18\x01 \x01(\t\x12\x0b\n\x03val\x18\x02 \x01(\x02\"\x8a\x04\n\x05Query\x12*\n\x08\x65vidence\x18\x01 \x03(\x0b\x32\x18.sn_bayes.Query.Evidence\x12\'\n\x07outvars\x18\x02 \x03(\x0b\x32\x16.sn_bayes.Query.Outvar\x12+\n\x0b\x65xplainvars\x18\x03 \x03(\x0b\x32\x16.sn_bayes.Query.Outvar\x12\x33\n\x13reverse_explainvars\x18\x04 \x03(\x0b\x32\x16.sn_bayes.Query.Outvar\x12\x30\n\x10reverse_evidence\x18\x05 \x03(\x0b\x32\x16.sn_bayes.Query.Outvar\x12+\n\ntimeseries\x18\x06 \x03(\x0b\x32\x17.sn_bayes.Query.Anomaly\x12,\n\x0cinclude_list\x18\x07 \x03(\x0b\x32\x16.sn_bayes.Query.Outvar\x12\"\n\x08\x62\x61seline\x18\x08 \x01(\x0b\x32\x10.sn_bayes.Answer\x12\x0e\n\x06switch\x18\t \x01(\t\x1a-\n\x08\x45vidence\x12\x0f\n\x07var_num\x18\x01 \x01(\x05\x12\x10\n\x08response\x18\x02 \x01(\x05\x1a\x19\n\x06Outvar\x12\x0f\n\x07var_num\x18\x01 \x01(\x05\x1a?\n\x07\x41nomaly\x12\x0f\n\x07var_num\x18\x01 \x01(\x05\x12#\n\x08timevals\x18\x02 \x03(\x0b\x32\x11.sn_bayes.Timeval\"5\n\x07QueryId\x12\n\n\x02id\x18\x01 \x01(\t\x12\x1e\n\x05query\x18\x02 \x01(\x0b\x32\x0f.sn_bayes.Query\"j\n\x14\x42\x61yesianNetworkQuery\x12\x32\n\x0f\x62\x61yesianNetwork\x18\x01 \x01(\x0b\x32\x19.sn_bayes.BayesianNetwork\x12\x1e\n\x05query\x18\x02 \x01(\x0b\x32\x0f.sn_bayes.Query2\xde\x01\n\x08\x42\x61yesNet\x12&\n\x06\x45ndNet\x12\x0c.sn_bayes.Id\x1a\x0c.sn_bayes.Id\"\x00\x12\x35\n\x08StartNet\x12\x19.sn_bayes.BayesianNetwork\x1a\x0c.sn_bayes.Id\"\x00\x12/\n\x06\x41skNet\x12\x11.sn_bayes.QueryId\x1a\x10.sn_bayes.Answer\"\x00\x12\x42\n\x0cStatelessNet\x12\x1e.sn_bayes.BayesianNetworkQuery\x1a\x10.sn_bayes.Answer\"\x00\x62\x06proto3'
)




_BAYESIANNETWORK_DISCRETEDISTRIBUTION_VARIABLE = _descriptor.Descriptor(
  name='Variable',
  full_name='sn_bayes.BayesianNetwork.DiscreteDistribution.Variable',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='sn_bayes.BayesianNetwork.DiscreteDistribution.Variable.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='probability', full_name='sn_bayes.BayesianNetwork.DiscreteDistribution.Variable.probability', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=413,
  serialized_end=458,
)

_BAYESIANNETWORK_DISCRETEDISTRIBUTION = _descriptor.Descriptor(
  name='DiscreteDistribution',
  full_name='sn_bayes.BayesianNetwork.DiscreteDistribution',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='sn_bayes.BayesianNetwork.DiscreteDistribution.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='variables', full_name='sn_bayes.BayesianNetwork.DiscreteDistribution.variables', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_BAYESIANNETWORK_DISCRETEDISTRIBUTION_VARIABLE, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=299,
  serialized_end=458,
)

_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_RANDOMVARIABLE = _descriptor.Descriptor(
  name='RandomVariable',
  full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.RandomVariable',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.RandomVariable.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=797,
  serialized_end=827,
)

_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW_RANDOMVARIABLEVALUE = _descriptor.Descriptor(
  name='RandomVariableValue',
  full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow.RandomVariableValue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow.RandomVariableValue.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1012,
  serialized_end=1047,
)

_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW = _descriptor.Descriptor(
  name='ConditionalProbabilityRow',
  full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='randomVariableValues', full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow.randomVariableValues', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='probability', full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow.probability', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW_RANDOMVARIABLEVALUE, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=830,
  serialized_end=1047,
)

_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_OUTVAR = _descriptor.Descriptor(
  name='OutVar',
  full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.OutVar',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.OutVar.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1049,
  serialized_end=1071,
)

_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE = _descriptor.Descriptor(
  name='ConditionalProbabilityTable',
  full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='randomVariables', full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.randomVariables', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='conditionalProbabilityRows', full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.conditionalProbabilityRows', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='outvars', full_name='sn_bayes.BayesianNetwork.ConditionalProbabilityTable.outvars', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_RANDOMVARIABLE, _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW, _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_OUTVAR, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=461,
  serialized_end=1071,
)

_BAYESIANNETWORK_ANOMALY_DETECTOR = _descriptor.Descriptor(
  name='Detector',
  full_name='sn_bayes.BayesianNetwork.Anomaly.Detector',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='sn_bayes.BayesianNetwork.Anomaly.Detector.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1352,
  serialized_end=1376,
)

_BAYESIANNETWORK_ANOMALY = _descriptor.Descriptor(
  name='Anomaly',
  full_name='sn_bayes.BayesianNetwork.Anomaly',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='detectors', full_name='sn_bayes.BayesianNetwork.Anomaly.detectors', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_all', full_name='sn_bayes.BayesianNetwork.Anomaly.is_all', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='varName', full_name='sn_bayes.BayesianNetwork.Anomaly.varName', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='n_steps', full_name='sn_bayes.BayesianNetwork.Anomaly.n_steps', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='step_size', full_name='sn_bayes.BayesianNetwork.Anomaly.step_size', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='c', full_name='sn_bayes.BayesianNetwork.Anomaly.c', index=5,
      number=6, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='n', full_name='sn_bayes.BayesianNetwork.Anomaly.n', index=6,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='window', full_name='sn_bayes.BayesianNetwork.Anomaly.window', index=7,
      number=8, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='side', full_name='sn_bayes.BayesianNetwork.Anomaly.side', index=8,
      number=9, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='high', full_name='sn_bayes.BayesianNetwork.Anomaly.high', index=9,
      number=10, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='low', full_name='sn_bayes.BayesianNetwork.Anomaly.low', index=10,
      number=11, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='high_percent', full_name='sn_bayes.BayesianNetwork.Anomaly.high_percent', index=11,
      number=12, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='low_percent', full_name='sn_bayes.BayesianNetwork.Anomaly.low_percent', index=12,
      number=13, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='std', full_name='sn_bayes.BayesianNetwork.Anomaly.std', index=13,
      number=14, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_BAYESIANNETWORK_ANOMALY_DETECTOR, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1074,
  serialized_end=1376,
)

_BAYESIANNETWORK = _descriptor.Descriptor(
  name='BayesianNetwork',
  full_name='sn_bayes.BayesianNetwork',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='discreteDistributions', full_name='sn_bayes.BayesianNetwork.discreteDistributions', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='conditionalProbabilityTables', full_name='sn_bayes.BayesianNetwork.conditionalProbabilityTables', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='anomalies', full_name='sn_bayes.BayesianNetwork.anomalies', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_BAYESIANNETWORK_DISCRETEDISTRIBUTION, _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE, _BAYESIANNETWORK_ANOMALY, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=53,
  serialized_end=1376,
)


_ID = _descriptor.Descriptor(
  name='Id',
  full_name='sn_bayes.Id',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='sn_bayes.Id.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='error_msg', full_name='sn_bayes.Id.error_msg', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1378,
  serialized_end=1413,
)


_TIMEVAL = _descriptor.Descriptor(
  name='Timeval',
  full_name='sn_bayes.Timeval',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='val', full_name='sn_bayes.Timeval.val', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='interval', full_name='sn_bayes.Timeval.interval', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1415,
  serialized_end=1455,
)


_ANSWER_VARANSWER_VARSTATE = _descriptor.Descriptor(
  name='VarState',
  full_name='sn_bayes.Answer.VarAnswer.VarState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='state_num', full_name='sn_bayes.Answer.VarAnswer.VarState.state_num', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='probability', full_name='sn_bayes.Answer.VarAnswer.VarState.probability', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1777,
  serialized_end=1827,
)

_ANSWER_VARANSWER = _descriptor.Descriptor(
  name='VarAnswer',
  full_name='sn_bayes.Answer.VarAnswer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='var_num', full_name='sn_bayes.Answer.VarAnswer.var_num', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='varStates', full_name='sn_bayes.Answer.VarAnswer.varStates', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_ANSWER_VARANSWER_VARSTATE, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1691,
  serialized_end=1827,
)

_ANSWER_ANOMALYANSWER_ANOMALY = _descriptor.Descriptor(
  name='Anomaly',
  full_name='sn_bayes.Answer.AnomalyAnswer.Anomaly',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='is_anomaly', full_name='sn_bayes.Answer.AnomalyAnswer.Anomaly.is_anomaly', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1959,
  serialized_end=1988,
)

_ANSWER_ANOMALYANSWER = _descriptor.Descriptor(
  name='AnomalyAnswer',
  full_name='sn_bayes.Answer.AnomalyAnswer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='var_num', full_name='sn_bayes.Answer.AnomalyAnswer.var_num', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='signals', full_name='sn_bayes.Answer.AnomalyAnswer.signals', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='anomalies', full_name='sn_bayes.Answer.AnomalyAnswer.anomalies', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_ANSWER_ANOMALYANSWER_ANOMALY, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1830,
  serialized_end=1988,
)

_ANSWER_FITANSWER_FITSTATE = _descriptor.Descriptor(
  name='FitState',
  full_name='sn_bayes.Answer.FitAnswer.FitState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='fitted', full_name='sn_bayes.Answer.FitAnswer.FitState.fitted', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='val', full_name='sn_bayes.Answer.FitAnswer.FitState.val', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2076,
  serialized_end=2115,
)

_ANSWER_FITANSWER = _descriptor.Descriptor(
  name='FitAnswer',
  full_name='sn_bayes.Answer.FitAnswer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='var_num', full_name='sn_bayes.Answer.FitAnswer.var_num', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='fitStates', full_name='sn_bayes.Answer.FitAnswer.fitStates', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_ANSWER_FITANSWER_FITSTATE, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1990,
  serialized_end=2115,
)

_ANSWER = _descriptor.Descriptor(
  name='Answer',
  full_name='sn_bayes.Answer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='varAnswers', full_name='sn_bayes.Answer.varAnswers', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='explanations', full_name='sn_bayes.Answer.explanations', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='signal_anomalies', full_name='sn_bayes.Answer.signal_anomalies', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='anomalies', full_name='sn_bayes.Answer.anomalies', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='error_msg', full_name='sn_bayes.Answer.error_msg', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_ANSWER_VARANSWER, _ANSWER_ANOMALYANSWER, _ANSWER_FITANSWER, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1458,
  serialized_end=2115,
)


_QUERY_EVIDENCE = _descriptor.Descriptor(
  name='Evidence',
  full_name='sn_bayes.Query.Evidence',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='var_num', full_name='sn_bayes.Query.Evidence.var_num', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='response', full_name='sn_bayes.Query.Evidence.response', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2503,
  serialized_end=2548,
)

_QUERY_OUTVAR = _descriptor.Descriptor(
  name='Outvar',
  full_name='sn_bayes.Query.Outvar',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='var_num', full_name='sn_bayes.Query.Outvar.var_num', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2550,
  serialized_end=2575,
)

_QUERY_ANOMALY = _descriptor.Descriptor(
  name='Anomaly',
  full_name='sn_bayes.Query.Anomaly',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='var_num', full_name='sn_bayes.Query.Anomaly.var_num', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='timevals', full_name='sn_bayes.Query.Anomaly.timevals', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2577,
  serialized_end=2640,
)

_QUERY = _descriptor.Descriptor(
  name='Query',
  full_name='sn_bayes.Query',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='evidence', full_name='sn_bayes.Query.evidence', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='outvars', full_name='sn_bayes.Query.outvars', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='explainvars', full_name='sn_bayes.Query.explainvars', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='reverse_explainvars', full_name='sn_bayes.Query.reverse_explainvars', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='reverse_evidence', full_name='sn_bayes.Query.reverse_evidence', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='timeseries', full_name='sn_bayes.Query.timeseries', index=5,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='include_list', full_name='sn_bayes.Query.include_list', index=6,
      number=7, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='baseline', full_name='sn_bayes.Query.baseline', index=7,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='switch', full_name='sn_bayes.Query.switch', index=8,
      number=9, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_QUERY_EVIDENCE, _QUERY_OUTVAR, _QUERY_ANOMALY, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2118,
  serialized_end=2640,
)


_QUERYID = _descriptor.Descriptor(
  name='QueryId',
  full_name='sn_bayes.QueryId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='sn_bayes.QueryId.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='query', full_name='sn_bayes.QueryId.query', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2642,
  serialized_end=2695,
)


_BAYESIANNETWORKQUERY = _descriptor.Descriptor(
  name='BayesianNetworkQuery',
  full_name='sn_bayes.BayesianNetworkQuery',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bayesianNetwork', full_name='sn_bayes.BayesianNetworkQuery.bayesianNetwork', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='query', full_name='sn_bayes.BayesianNetworkQuery.query', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2697,
  serialized_end=2803,
)

_BAYESIANNETWORK_DISCRETEDISTRIBUTION_VARIABLE.containing_type = _BAYESIANNETWORK_DISCRETEDISTRIBUTION
_BAYESIANNETWORK_DISCRETEDISTRIBUTION.fields_by_name['variables'].message_type = _BAYESIANNETWORK_DISCRETEDISTRIBUTION_VARIABLE
_BAYESIANNETWORK_DISCRETEDISTRIBUTION.containing_type = _BAYESIANNETWORK
_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_RANDOMVARIABLE.containing_type = _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE
_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW_RANDOMVARIABLEVALUE.containing_type = _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW
_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW.fields_by_name['randomVariableValues'].message_type = _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW_RANDOMVARIABLEVALUE
_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW.containing_type = _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE
_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_OUTVAR.containing_type = _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE
_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE.fields_by_name['randomVariables'].message_type = _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_RANDOMVARIABLE
_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE.fields_by_name['conditionalProbabilityRows'].message_type = _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW
_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE.fields_by_name['outvars'].message_type = _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_OUTVAR
_BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE.containing_type = _BAYESIANNETWORK
_BAYESIANNETWORK_ANOMALY_DETECTOR.containing_type = _BAYESIANNETWORK_ANOMALY
_BAYESIANNETWORK_ANOMALY.fields_by_name['detectors'].message_type = _BAYESIANNETWORK_ANOMALY_DETECTOR
_BAYESIANNETWORK_ANOMALY.containing_type = _BAYESIANNETWORK
_BAYESIANNETWORK.fields_by_name['discreteDistributions'].message_type = _BAYESIANNETWORK_DISCRETEDISTRIBUTION
_BAYESIANNETWORK.fields_by_name['conditionalProbabilityTables'].message_type = _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE
_BAYESIANNETWORK.fields_by_name['anomalies'].message_type = _BAYESIANNETWORK_ANOMALY
_ANSWER_VARANSWER_VARSTATE.containing_type = _ANSWER_VARANSWER
_ANSWER_VARANSWER.fields_by_name['varStates'].message_type = _ANSWER_VARANSWER_VARSTATE
_ANSWER_VARANSWER.containing_type = _ANSWER
_ANSWER_ANOMALYANSWER_ANOMALY.containing_type = _ANSWER_ANOMALYANSWER
_ANSWER_ANOMALYANSWER.fields_by_name['signals'].message_type = _TIMEVAL
_ANSWER_ANOMALYANSWER.fields_by_name['anomalies'].message_type = _ANSWER_ANOMALYANSWER_ANOMALY
_ANSWER_ANOMALYANSWER.containing_type = _ANSWER
_ANSWER_FITANSWER_FITSTATE.containing_type = _ANSWER_FITANSWER
_ANSWER_FITANSWER.fields_by_name['fitStates'].message_type = _ANSWER_FITANSWER_FITSTATE
_ANSWER_FITANSWER.containing_type = _ANSWER
_ANSWER.fields_by_name['varAnswers'].message_type = _ANSWER_VARANSWER
_ANSWER.fields_by_name['explanations'].message_type = _ANSWER_VARANSWER
_ANSWER.fields_by_name['signal_anomalies'].message_type = _ANSWER_ANOMALYANSWER
_ANSWER.fields_by_name['anomalies'].message_type = _ANSWER_FITANSWER
_QUERY_EVIDENCE.containing_type = _QUERY
_QUERY_OUTVAR.containing_type = _QUERY
_QUERY_ANOMALY.fields_by_name['timevals'].message_type = _TIMEVAL
_QUERY_ANOMALY.containing_type = _QUERY
_QUERY.fields_by_name['evidence'].message_type = _QUERY_EVIDENCE
_QUERY.fields_by_name['outvars'].message_type = _QUERY_OUTVAR
_QUERY.fields_by_name['explainvars'].message_type = _QUERY_OUTVAR
_QUERY.fields_by_name['reverse_explainvars'].message_type = _QUERY_OUTVAR
_QUERY.fields_by_name['reverse_evidence'].message_type = _QUERY_OUTVAR
_QUERY.fields_by_name['timeseries'].message_type = _QUERY_ANOMALY
_QUERY.fields_by_name['include_list'].message_type = _QUERY_OUTVAR
_QUERY.fields_by_name['baseline'].message_type = _ANSWER
_QUERYID.fields_by_name['query'].message_type = _QUERY
_BAYESIANNETWORKQUERY.fields_by_name['bayesianNetwork'].message_type = _BAYESIANNETWORK
_BAYESIANNETWORKQUERY.fields_by_name['query'].message_type = _QUERY
DESCRIPTOR.message_types_by_name['BayesianNetwork'] = _BAYESIANNETWORK
DESCRIPTOR.message_types_by_name['Id'] = _ID
DESCRIPTOR.message_types_by_name['Timeval'] = _TIMEVAL
DESCRIPTOR.message_types_by_name['Answer'] = _ANSWER
DESCRIPTOR.message_types_by_name['Query'] = _QUERY
DESCRIPTOR.message_types_by_name['QueryId'] = _QUERYID
DESCRIPTOR.message_types_by_name['BayesianNetworkQuery'] = _BAYESIANNETWORKQUERY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

BayesianNetwork = _reflection.GeneratedProtocolMessageType('BayesianNetwork', (_message.Message,), {

  'DiscreteDistribution' : _reflection.GeneratedProtocolMessageType('DiscreteDistribution', (_message.Message,), {

    'Variable' : _reflection.GeneratedProtocolMessageType('Variable', (_message.Message,), {
      'DESCRIPTOR' : _BAYESIANNETWORK_DISCRETEDISTRIBUTION_VARIABLE,
      '__module__' : 'sn_service.service_spec.bayesian_pb2'
      # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork.DiscreteDistribution.Variable)
      })
    ,
    'DESCRIPTOR' : _BAYESIANNETWORK_DISCRETEDISTRIBUTION,
    '__module__' : 'sn_service.service_spec.bayesian_pb2'
    # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork.DiscreteDistribution)
    })
  ,

  'ConditionalProbabilityTable' : _reflection.GeneratedProtocolMessageType('ConditionalProbabilityTable', (_message.Message,), {

    'RandomVariable' : _reflection.GeneratedProtocolMessageType('RandomVariable', (_message.Message,), {
      'DESCRIPTOR' : _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_RANDOMVARIABLE,
      '__module__' : 'sn_service.service_spec.bayesian_pb2'
      # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork.ConditionalProbabilityTable.RandomVariable)
      })
    ,

    'ConditionalProbabilityRow' : _reflection.GeneratedProtocolMessageType('ConditionalProbabilityRow', (_message.Message,), {

      'RandomVariableValue' : _reflection.GeneratedProtocolMessageType('RandomVariableValue', (_message.Message,), {
        'DESCRIPTOR' : _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW_RANDOMVARIABLEVALUE,
        '__module__' : 'sn_service.service_spec.bayesian_pb2'
        # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow.RandomVariableValue)
        })
      ,
      'DESCRIPTOR' : _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_CONDITIONALPROBABILITYROW,
      '__module__' : 'sn_service.service_spec.bayesian_pb2'
      # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow)
      })
    ,

    'OutVar' : _reflection.GeneratedProtocolMessageType('OutVar', (_message.Message,), {
      'DESCRIPTOR' : _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE_OUTVAR,
      '__module__' : 'sn_service.service_spec.bayesian_pb2'
      # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork.ConditionalProbabilityTable.OutVar)
      })
    ,
    'DESCRIPTOR' : _BAYESIANNETWORK_CONDITIONALPROBABILITYTABLE,
    '__module__' : 'sn_service.service_spec.bayesian_pb2'
    # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork.ConditionalProbabilityTable)
    })
  ,

  'Anomaly' : _reflection.GeneratedProtocolMessageType('Anomaly', (_message.Message,), {

    'Detector' : _reflection.GeneratedProtocolMessageType('Detector', (_message.Message,), {
      'DESCRIPTOR' : _BAYESIANNETWORK_ANOMALY_DETECTOR,
      '__module__' : 'sn_service.service_spec.bayesian_pb2'
      # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork.Anomaly.Detector)
      })
    ,
    'DESCRIPTOR' : _BAYESIANNETWORK_ANOMALY,
    '__module__' : 'sn_service.service_spec.bayesian_pb2'
    # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork.Anomaly)
    })
  ,
  'DESCRIPTOR' : _BAYESIANNETWORK,
  '__module__' : 'sn_service.service_spec.bayesian_pb2'
  # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetwork)
  })
_sym_db.RegisterMessage(BayesianNetwork)
_sym_db.RegisterMessage(BayesianNetwork.DiscreteDistribution)
_sym_db.RegisterMessage(BayesianNetwork.DiscreteDistribution.Variable)
_sym_db.RegisterMessage(BayesianNetwork.ConditionalProbabilityTable)
_sym_db.RegisterMessage(BayesianNetwork.ConditionalProbabilityTable.RandomVariable)
_sym_db.RegisterMessage(BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow)
_sym_db.RegisterMessage(BayesianNetwork.ConditionalProbabilityTable.ConditionalProbabilityRow.RandomVariableValue)
_sym_db.RegisterMessage(BayesianNetwork.ConditionalProbabilityTable.OutVar)
_sym_db.RegisterMessage(BayesianNetwork.Anomaly)
_sym_db.RegisterMessage(BayesianNetwork.Anomaly.Detector)

Id = _reflection.GeneratedProtocolMessageType('Id', (_message.Message,), {
  'DESCRIPTOR' : _ID,
  '__module__' : 'sn_service.service_spec.bayesian_pb2'
  # @@protoc_insertion_point(class_scope:sn_bayes.Id)
  })
_sym_db.RegisterMessage(Id)

Timeval = _reflection.GeneratedProtocolMessageType('Timeval', (_message.Message,), {
  'DESCRIPTOR' : _TIMEVAL,
  '__module__' : 'sn_service.service_spec.bayesian_pb2'
  # @@protoc_insertion_point(class_scope:sn_bayes.Timeval)
  })
_sym_db.RegisterMessage(Timeval)

Answer = _reflection.GeneratedProtocolMessageType('Answer', (_message.Message,), {

  'VarAnswer' : _reflection.GeneratedProtocolMessageType('VarAnswer', (_message.Message,), {

    'VarState' : _reflection.GeneratedProtocolMessageType('VarState', (_message.Message,), {
      'DESCRIPTOR' : _ANSWER_VARANSWER_VARSTATE,
      '__module__' : 'sn_service.service_spec.bayesian_pb2'
      # @@protoc_insertion_point(class_scope:sn_bayes.Answer.VarAnswer.VarState)
      })
    ,
    'DESCRIPTOR' : _ANSWER_VARANSWER,
    '__module__' : 'sn_service.service_spec.bayesian_pb2'
    # @@protoc_insertion_point(class_scope:sn_bayes.Answer.VarAnswer)
    })
  ,

  'AnomalyAnswer' : _reflection.GeneratedProtocolMessageType('AnomalyAnswer', (_message.Message,), {

    'Anomaly' : _reflection.GeneratedProtocolMessageType('Anomaly', (_message.Message,), {
      'DESCRIPTOR' : _ANSWER_ANOMALYANSWER_ANOMALY,
      '__module__' : 'sn_service.service_spec.bayesian_pb2'
      # @@protoc_insertion_point(class_scope:sn_bayes.Answer.AnomalyAnswer.Anomaly)
      })
    ,
    'DESCRIPTOR' : _ANSWER_ANOMALYANSWER,
    '__module__' : 'sn_service.service_spec.bayesian_pb2'
    # @@protoc_insertion_point(class_scope:sn_bayes.Answer.AnomalyAnswer)
    })
  ,

  'FitAnswer' : _reflection.GeneratedProtocolMessageType('FitAnswer', (_message.Message,), {

    'FitState' : _reflection.GeneratedProtocolMessageType('FitState', (_message.Message,), {
      'DESCRIPTOR' : _ANSWER_FITANSWER_FITSTATE,
      '__module__' : 'sn_service.service_spec.bayesian_pb2'
      # @@protoc_insertion_point(class_scope:sn_bayes.Answer.FitAnswer.FitState)
      })
    ,
    'DESCRIPTOR' : _ANSWER_FITANSWER,
    '__module__' : 'sn_service.service_spec.bayesian_pb2'
    # @@protoc_insertion_point(class_scope:sn_bayes.Answer.FitAnswer)
    })
  ,
  'DESCRIPTOR' : _ANSWER,
  '__module__' : 'sn_service.service_spec.bayesian_pb2'
  # @@protoc_insertion_point(class_scope:sn_bayes.Answer)
  })
_sym_db.RegisterMessage(Answer)
_sym_db.RegisterMessage(Answer.VarAnswer)
_sym_db.RegisterMessage(Answer.VarAnswer.VarState)
_sym_db.RegisterMessage(Answer.AnomalyAnswer)
_sym_db.RegisterMessage(Answer.AnomalyAnswer.Anomaly)
_sym_db.RegisterMessage(Answer.FitAnswer)
_sym_db.RegisterMessage(Answer.FitAnswer.FitState)

Query = _reflection.GeneratedProtocolMessageType('Query', (_message.Message,), {

  'Evidence' : _reflection.GeneratedProtocolMessageType('Evidence', (_message.Message,), {
    'DESCRIPTOR' : _QUERY_EVIDENCE,
    '__module__' : 'sn_service.service_spec.bayesian_pb2'
    # @@protoc_insertion_point(class_scope:sn_bayes.Query.Evidence)
    })
  ,

  'Outvar' : _reflection.GeneratedProtocolMessageType('Outvar', (_message.Message,), {
    'DESCRIPTOR' : _QUERY_OUTVAR,
    '__module__' : 'sn_service.service_spec.bayesian_pb2'
    # @@protoc_insertion_point(class_scope:sn_bayes.Query.Outvar)
    })
  ,

  'Anomaly' : _reflection.GeneratedProtocolMessageType('Anomaly', (_message.Message,), {
    'DESCRIPTOR' : _QUERY_ANOMALY,
    '__module__' : 'sn_service.service_spec.bayesian_pb2'
    # @@protoc_insertion_point(class_scope:sn_bayes.Query.Anomaly)
    })
  ,
  'DESCRIPTOR' : _QUERY,
  '__module__' : 'sn_service.service_spec.bayesian_pb2'
  # @@protoc_insertion_point(class_scope:sn_bayes.Query)
  })
_sym_db.RegisterMessage(Query)
_sym_db.RegisterMessage(Query.Evidence)
_sym_db.RegisterMessage(Query.Outvar)
_sym_db.RegisterMessage(Query.Anomaly)

QueryId = _reflection.GeneratedProtocolMessageType('QueryId', (_message.Message,), {
  'DESCRIPTOR' : _QUERYID,
  '__module__' : 'sn_service.service_spec.bayesian_pb2'
  # @@protoc_insertion_point(class_scope:sn_bayes.QueryId)
  })
_sym_db.RegisterMessage(QueryId)

BayesianNetworkQuery = _reflection.GeneratedProtocolMessageType('BayesianNetworkQuery', (_message.Message,), {
  'DESCRIPTOR' : _BAYESIANNETWORKQUERY,
  '__module__' : 'sn_service.service_spec.bayesian_pb2'
  # @@protoc_insertion_point(class_scope:sn_bayes.BayesianNetworkQuery)
  })
_sym_db.RegisterMessage(BayesianNetworkQuery)



_BAYESNET = _descriptor.ServiceDescriptor(
  name='BayesNet',
  full_name='sn_bayes.BayesNet',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=2806,
  serialized_end=3028,
  methods=[
  _descriptor.MethodDescriptor(
    name='EndNet',
    full_name='sn_bayes.BayesNet.EndNet',
    index=0,
    containing_service=None,
    input_type=_ID,
    output_type=_ID,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='StartNet',
    full_name='sn_bayes.BayesNet.StartNet',
    index=1,
    containing_service=None,
    input_type=_BAYESIANNETWORK,
    output_type=_ID,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='AskNet',
    full_name='sn_bayes.BayesNet.AskNet',
    index=2,
    containing_service=None,
    input_type=_QUERYID,
    output_type=_ANSWER,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='StatelessNet',
    full_name='sn_bayes.BayesNet.StatelessNet',
    index=3,
    containing_service=None,
    input_type=_BAYESIANNETWORKQUERY,
    output_type=_ANSWER,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_BAYESNET)

DESCRIPTOR.services_by_name['BayesNet'] = _BAYESNET

# @@protoc_insertion_point(module_scope)
