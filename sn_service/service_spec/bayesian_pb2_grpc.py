# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from sn_service.service_spec import bayesian_pb2 as sn__service_dot_service__spec_dot_bayesian__pb2


class BayesNetStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.EndNet = channel.unary_unary(
        '/sn_bayes.BayesNet/EndNet',
        request_serializer=sn__service_dot_service__spec_dot_bayesian__pb2.Id.SerializeToString,
        response_deserializer=sn__service_dot_service__spec_dot_bayesian__pb2.Id.FromString,
        )
    self.StartNet = channel.unary_unary(
        '/sn_bayes.BayesNet/StartNet',
        request_serializer=sn__service_dot_service__spec_dot_bayesian__pb2.BayesianNetwork.SerializeToString,
        response_deserializer=sn__service_dot_service__spec_dot_bayesian__pb2.Id.FromString,
        )
    self.AskNet = channel.unary_unary(
        '/sn_bayes.BayesNet/AskNet',
        request_serializer=sn__service_dot_service__spec_dot_bayesian__pb2.QueryId.SerializeToString,
        response_deserializer=sn__service_dot_service__spec_dot_bayesian__pb2.Answer.FromString,
        )
    self.StatelessNet = channel.unary_unary(
        '/sn_bayes.BayesNet/StatelessNet',
        request_serializer=sn__service_dot_service__spec_dot_bayesian__pb2.BayesianNetworkQuery.SerializeToString,
        response_deserializer=sn__service_dot_service__spec_dot_bayesian__pb2.Answer.FromString,
        )


class BayesNetServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def EndNet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartNet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AskNet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StatelessNet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BayesNetServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'EndNet': grpc.unary_unary_rpc_method_handler(
          servicer.EndNet,
          request_deserializer=sn__service_dot_service__spec_dot_bayesian__pb2.Id.FromString,
          response_serializer=sn__service_dot_service__spec_dot_bayesian__pb2.Id.SerializeToString,
      ),
      'StartNet': grpc.unary_unary_rpc_method_handler(
          servicer.StartNet,
          request_deserializer=sn__service_dot_service__spec_dot_bayesian__pb2.BayesianNetwork.FromString,
          response_serializer=sn__service_dot_service__spec_dot_bayesian__pb2.Id.SerializeToString,
      ),
      'AskNet': grpc.unary_unary_rpc_method_handler(
          servicer.AskNet,
          request_deserializer=sn__service_dot_service__spec_dot_bayesian__pb2.QueryId.FromString,
          response_serializer=sn__service_dot_service__spec_dot_bayesian__pb2.Answer.SerializeToString,
      ),
      'StatelessNet': grpc.unary_unary_rpc_method_handler(
          servicer.StatelessNet,
          request_deserializer=sn__service_dot_service__spec_dot_bayesian__pb2.BayesianNetworkQuery.FromString,
          response_serializer=sn__service_dot_service__spec_dot_bayesian__pb2.Answer.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sn_bayes.BayesNet', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
